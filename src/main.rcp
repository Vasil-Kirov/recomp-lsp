main

#import file
#import init as base
#import array as arr
#import io
#import mem
#import os
#import json
#import str
#import binary as bin
#import recomp
#import request
#import log

system :: fn #foreign(cmd: *u8) -> int;

read_packet :: fn(alloc: *mem.Allocator) {
	// Content Length
	read := io.readln(alloc);
	log.write("Got");

	p := json.make_parser(read);

    for !json.is_number(json.peek_char(&p)) {
        json.next_char(&p);
    }
	v := json.parse_number(&p);
	content_len := v.v.integer;

	// Content Type, ignore for now
	io.readln(alloc);

	got_json := io.read(content_len, alloc);

	content := json.parse(got_json, alloc);

	if content.t == json.Type.Invalid {
		log.write("Failed to parse json");
		return;
	}
	method, success := json.get_obj_field(content, "method");
	if !success { 
		log.write("No method?");
		return;
	}
	
	log.write(method.v.str);

	// @NOTE: not every request has an id
	id, found_id := json.get_obj_field(content, "id");
	params, found_params := json.get_obj_field(content, "params");
	if !found_params {
		log.write("no params");
		return;
	}

	ctx := request.Context { id, params };
	request.handle(method.v.str, ctx, alloc);

}

main :: fn() -> i32 {
	system(c"rm /home/vasko/programming/recomp-lsp/bin/log.txt");
	system(c"touch /home/vasko/programming/recomp-lsp/bin/log.txt");

	recomp.ra = mem.create_scratch(mem.mb(8));
	request.ga = mem.create_generic_allocator();
	file.init();

	scratch := mem.create_scratch(mem.mb(64));
	start := (@*mem.ScratchContext(?scratch.data)).current;
	defer mem.destroy_scratch(&scratch);

	log_file := os.open("/home/vasko/programming/recomp-lsp/bin/log.txt");
	log.file = log_file;
	defer {
		if log.file != null {
			os.close(?log.file);
		}
	}

	for !request.should_close {
		read_packet(&scratch);
		ctx := @*mem.ScratchContext(?scratch.data);
		ctx.current = start;
	}

	return 0;
}

